pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
function _init()
	game = create_game()
	game:init()
end

function _update()
	game:update()
end

function _draw()
	game:draw()
end
-->8
-- player

local songs = {
	{
		name = "fire",
		notes = {"u", "d", "u"},
		s = 10,
		speed = 2,
	},
	{
		name = "ice",
		notes = {"l", "r", "l"},
		s = 9,
		speed = 2,
	},
	{
		name = "reflect",
		notes = {"l", "u", "r"},
		s = 8,
		speed = 2,
	}
}

function check_song(song)
	for other in all(songs) do
		local match = true
		for i=1,#song do
			if song[i] != other.notes[i] then
				match = false
				break
			end 
		end
		if match then return other end
	end
end

function create_player()
	return {
		x = 0,
		y = 0,
		hp = 8,
		mp = 8,
		max_vel = {x = 1, y = 1},
		accel = .4,
		friction = .8,
		s = 16,
		s_i = 1, -- anim sprite index
		s_walk = {16, 17, 18, 19},
		s_idle = {16, 20},
		is_idle = true,
		offset = {x = 2, y = 0},
		w = 3,
		h = 7,
		vel = {x = 0, y = 0},
		facing = {x = 1, y = -1},
		playing = false,
		song = nil,
		notes = {},
		max_notes = 3,
		cast_delay = 10,
		t = 0,
		anim_speed_walk = 4, -- every 4 frames
		anim_speed_idle = 8,
		
		update = function(self)
			self.t += 1
			local t = self.t
			
			-- play song
			if btn(‚ùé) then
				self.playing = true
			else
				self.playing = false
			end
			
			if self.playing then
				local note = ""
				
				if btnp(‚¨ÖÔ∏è) then
					note = "l"
				elseif btnp(‚û°Ô∏è) then
					note = "r"
				elseif btnp(‚¨ÜÔ∏è) then
					note = "u"
				elseif btnp(‚¨áÔ∏è) then
					note = "d"
				end
				
				if note != "" then
					add(self.notes, note)
					
					if #self.notes > self.max_notes then
						del(self.notes, self.notes[1])
					end
				end
			else
				if #self.notes == self.max_notes then
					self.song = check_song(self.notes)		
				end
			end
			
			local dx, dy = 0, 0
			local a = self.accel
			
			if btn(‚¨ÖÔ∏è) or btn(‚û°Ô∏è) or btn(‚¨ÜÔ∏è) or btn(‚¨áÔ∏è) then
				self.facing = {x = 0, y = 0}
			end
			
			if btn(‚¨ÖÔ∏è) then 
				dx -= a 
			end
			if btn(‚û°Ô∏è) then 
				dx += a 
			end
			if btn(‚¨ÜÔ∏è) then 
				dy -= a
			end
			if btn(‚¨áÔ∏è) then
				dy += a
			end
			
			local friction = self.friction
			
			-- apply friction
			if dx == 0 then
				self.vel.x *= friction				
				if self.vel.x < .05 then self.vel.x = 0 end
			end
			-- apply friction
			if dy == 0 then
				self.vel.y *= friction				
				if self.vel.y < .05 then self.vel.y = 0 end
			end
			
			self.vel.x = mid(
				self.vel.x + dx, 
				-self.max_vel.x, 
				self.max_vel.y
			)
			self.vel.y = mid(
				self.vel.y + dy,
				-self.max_vel.y,
				self.max_vel.y
			)
			
			local new_x = self.x + self.vel.x
			local new_y = self.y + self.vel.y
			
			local coll_x, coll_y = false, false
			
			for other in all(game.objects) do
				local obj = {
					x = new_x,
					y = self.y,
					offset = self.offset,
					w = self.w,
					h = self.h
				}
				
				-- x coll
				if collide(obj, other) then
					coll_x = true
				end 
			
				-- y coll
				obj.x = self.x
				obj.y = new_y
				
				if collide(obj, other) then
					coll_y = true
				end
			end
			
			if self.vel.x > 0 then
				self.facing.x = 1
			elseif self.vel.x < 0 then
				self.facing.x = -1
			end
			
			if self.vel.y > 0 then
				self.facing.y = 1
			elseif self.vel.y < 0 then
				self.facing.y = -1
			end
			
			if coll_x and coll_y then
				self.vel = {x = 0, y = 0}
			elseif not (coll_x or coll_y) then
				self.x = new_x
				self.y = new_y
			elseif coll_x then
				self.vel.x = 0
				self.y = new_y
			elseif coll_y then
				self.vel.y = 0
				self.x = new_x
			else
			
			end
			
			-- shoot
			if btn(üÖæÔ∏è) and t % self.cast_delay == 0 and self.song != nil then
				local obj = create_projectile(self.x, self.y, self.song.s)
				obj.direction = self.facing
				add(game.projectiles, obj) 
			end
		end,
		
		draw = function(self)
			self:get_spr()
			
			spr(
				self.s, 
				flr(self.x), 
				flr(self.y), 
				1, 1, 
				self.facing.x == -1
			)
			
			local nx = cam.x + 5
			local ny = cam.y + 25
			for note in all(self.notes) do
				if note == "l" then
					spr(3, nx, ny)
				elseif note == "r" then
					spr(3, nx, ny, 1, 1, true)
				elseif note == "u" then
					spr(2, nx, ny)
				elseif note == "d" then
					spr(2, nx, ny, 1, 1, true, true)
				end
				
				nx += 12
			end
		
			draw_debug_rect(self)
		end,
		
		get_spr = function(self)
			local is_idle, t = self.is_idle, self.t
			
			if abs(self.vel.x) > 0 or abs(self.vel.y) > 0 then
				if is_idle then
					self.is_idle = false
					self.s_i = 1
				elseif t % self.anim_speed_walk == 0 then
					self.s_i += 1
					if self.s_i > #self.s_walk then
						self.s_i = 1
					end
				end
				
				self.s = self.s_walk[self.s_i]
			elseif t % self.anim_speed_idle == 0 then
				if is_idle then
					self.s_i += 1
					
					if self.s_i > #self.s_idle then
						self.s_i = 1
					end
					
					self.s = self.s_idle[self.s_i]
				else
					self.s_i = 1
					self.is_idle = true
					self.s = self.s_idle[self.s_i]
				end
			end
		end
	}
end
-->8
-- utils

function player_camera(player)
	local cam_x = player.x - 64
	local cam_y = player.y - 64
	
 -- calculate map boundaries (assuming map is 128x32 tiles)
 local map_w = 128 * 8
 local map_h = 32 * 8

 -- clamp camera so it doesn't go outside the map
 cam_x = mid(0, cam_x, map_w - 128)
 cam_y = mid(0, cam_y, map_h - 128)

	camera(cam_x, cam_y)
	
	return {x = cam_x, y = cam_y}
end

-- aabb collision
function collide(a, b)
 return not (
  a.x + a.offset.x + a.w <= b.x + b.offset.x or
  a.x + a.offset.x >= b.x + b.offset.x + b.w or
  a.y + a.offset.y + a.h <= b.y + b.offset.y or
  a.y + a.offset.y >= b.y + b.offset.y + b.h
 )
end

function draw_debug_rect(self)
	if not debug then return end
	
	local x0 = self.x + self.offset.x
	local y0 = self.y + self.offset.y
	rect(x0, y0, x0 + self.w, y0 + self.h, 11)
end
-->8
-- game

map_w = 128
map_h = 32

flag_block = 0

debug = false
print_debug = true

function create_game()
	return {
		objects = {},
		projectiles = {},
		
		init = function(self)
			self.player = create_player()
			
			for i=0,map_w do
				for j=0,map_h do
					local tile = mget(i, j)
					
					if fget(tile, flag_block) then
						local obj = create_obj(i*8, j*8, "block")
						add(self.objects, obj)
					end
				end
			end
		end,
		
		update = function(self)
			self.player:update()
			
			for proj in all(self.projectiles) do
				proj:update()	
			end
		
			cam = player_camera(self.player)
		end,
		
		draw = function(self)
			cls(3)
	
			map()
			
			self.player:draw()
			
			for proj in all(self.projectiles) do
				proj:draw()
			end
			
			if debug then
				for obj in all(self.objects) do
					obj:draw()
				end
			end
			
			if print_debug then
				local playing = "no"
				
				if self.player.playing then
					playing = "yes"
				end
				
				print("speed: " .. self.player.vel.x .. ", " .. self.player.vel.y, 5, 5) 
				print("direction: " .. self.player.facing.x .. ", " .. self.player.facing.y, 12)
				print("projectiles: " .. #self.projectiles, 5, 19)
				
				if self.player.song then
					print("song: " .. self.player.song.name, 5, 26)
				end
			end
		end
	}
end
-->8
-- object

function create_obj(x, y, kind)
	return {
		x = x,
		y = y,
		offset = {x = 0, y = 0},
		w = 8,
		h = 8,
		kind = kind,
		
		draw = function(self)
				draw_debug_rect(self)
		end
	}
end
-->8
-- projectile
function create_projectile(x, y, s)
	return {
		x = x,
		y = y,
		s = s,
		speed = 2,
		t = 0,
		lifetime = 30,
		direction = {x = 1, y = 1},
		offset = {x = 0, y = 0},
		w = 8,
		h = 8,
		
		update = function(self)
			self.t += 1
			
			if self.t >= self.lifetime then
				del(game.projectiles, self)
				return
			end
			
			self.x += self.speed * self.direction.x
			self.y += self.speed * self.direction.y
			
			for obj in all(game.objects) do
				if collide(self, obj) then 
					del(game.projectiles, self)
				end
			end
		end,
		
		draw = function(self)
			spr(self.s, self.x, self.y)
		end
	}
end
__gfx__
0000000000000000000aa000000a9000000000066d66666600000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000aaaa0000aa900000000006bbb66666000e20000000aa0000aaaaa00000cc00000088000000000000000000000000000000000000000000
00700700000000000aaaaaa00aaaaaa9000000066dbb666600e222000000a90000a999a00000c1c0000082800000000000000000000000000000000000000000
0007700000000000aaaaaaaaaaaaaaa900000000dbdbbddd0e2222200000a00000a000a00000c010000080200000000000000000000000000000000000000000
000770000000000099aaaa99aaaaaaa900000000b666bbbb022222200000a00000a000a00000c000000080000000000000000000000000000000000000000000
007007000000000000aaaa000aaaaaa900000000666b6d6600bddb00000aa0000aa00aa0000cc000000880000000000000000000000000000000000000000000
000000000000000000aaaa0000aa90000000000066bb6d6600dddd00000aa0000aa00aa0000cc000000880000000000000000000000000000000000000000000
000000000000000000999900000a900000000000dbbddddd00d00d00000990000990099000011000000220000000000000000000000000000000000000000000
000000000000a000000000000000a000000000001331111111111111000000003333333333333333333333334444444444444444000000000000000000000000
0000a00000000a700000a00000000a70000000005535155511111111000000003333333333333333333333334444444444444444000000000000000000000000
00000a700a00aa9900000a700a00aa990000a0005355155511111111000000003333333333333333333333334444444444444444000000000000000000000000
0a00aa990aaaaaa00a00aa990aaaaaa000000a701111111111111111000000003333333333333333333333334444444444444444000000000000000000000000
0aaaaaa00daaaaa00aaaaaa00daaaaa00a00aa993333333311111111000000003333333444344443433333334444444334444444000000000000000000000000
0daaaaa000daaa000daaaaa000daaa000aaaaaa03333333311111111000000003333334444434444443333334444443333444444000000000000000000000000
00daaa000090009000daaa00009000900daaaaa03333333311111111000000003333344344444444434333334444433333344444000000000000000000000000
0009090000000000000099000000000000daaa003333333311111111000000003333444444444444444433334444333333334444000000000000000000000000
0000000000000000000000000000000000000000ffffffff00000000000000003333344444444444444433334444333333334444000000000000000000000000
00000000000000000000000000000000000000004444444400000000000000803333334444444444444433334444433333344444000000000000000000000000
00000000000000000000000000000000000000004755757400000000000008a83333344444444444443433334444443333444444000000000000000000000000
0000000000000000000000000000000000000000477777740000000000b000803333444444444444443333334444444334444444000000000000000000000000
000000000000000000000000000000000000000045575754000000008b0b0bd03333444444444444444333334444444444444444000000000000000000000000
00000000000000000000000000000000000000004444444400000000a800bd003333344444444444444333334444444444444444000000000000000000000000
000000000000000000000000000000000000000000011000000000008000bd003333434444444444444433334444444444444444000000000000000000000000
00000000000000000000000000000000000000000004411100000000000bd1113333444444444444444433334444444444444444000000000000000000000000
00000000000000000000000000000000000000000000000042222224000000803333434444444444444433330000000000000000000000000000000000000000
00000000000000000000000000000000006666000000000044444444000008a83333344444444444434333330000000000000000000000000000000000000000
0000000000000000000000000000000066dddd66000000004222222408b00d803333334344444444343333330000000000000000000000000000000000000000
000000000000000000000000000000006dc7ccd600000000444444448a8bd0003333333434333344433333330000000000000000000000000000000000000000
000000000000000000000000000000006ccc7cc600000000422222240800bbb03333333333333333333333330000000000000000000000000000000000000000
00000000000000000000000000000000667cc76600000000444444440000bd0b3333333333333333333333330000000000000000000000000000000000000000
000000000000000000000000000000005566665500000000422222240000b0113333333333333333333333330000000000000000000000000000000000000000
00000000000000000000000000000000005555000000000044444444000bd1113333333333333333333333330000000000000000000000000000000000000000
__gff__
0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000005050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000015151515151515151515151515003400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000002500003727372700000000001819191a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001819191919191919191919191a0000182c29292a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002829292929292929292929292a0000282929292a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000002829292929292929292929292a00182c2929292a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003839393939393939393939393a002829291b393a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000003839393a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000005050505050505050505050505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000015151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
